
===
/TEST_OUTPUT/workspace/another_consumer.go
References in File: 1
===

Reference at Line 8, Column 34:
 8|func AnotherConsumer() {
 9|	// Use helper function
10|	fmt.Println("Another message:", HelperFunction())
11|	
12|	// Create another SharedStruct instance
13|	s := &SharedStruct{
14|		ID:   2,
15|		Name: "another test",
16|		Value: 99.9,
17|		Constants: []string{SharedConstant, "extra"},
18|	}
19|	
20|	// Use the struct methods
21|	if name := s.GetName(); name != "" {
22|		fmt.Println("Got name:", name)
23|	}
24|	
25|	// Implement the interface with a custom type
26|	type CustomImplementor struct {
27|		SharedStruct
28|	}
29|	
30|	custom := &CustomImplementor{
31|		SharedStruct: *s,
32|	}
33|	
34|	// Custom type implements SharedInterface through embedding
35|	var iface SharedInterface = custom
36|	iface.Process()
37|	
38|	// Use shared type as a slice type
39|	values := []SharedType{1, 2, 3}
40|	for _, v := range values {
41|		fmt.Println("Value:", v)
42|	}
43|}



===
/TEST_OUTPUT/workspace/consumer.go
References in File: 1
===

Reference at Line 7, Column 13:
 7|func ConsumerFunction() {
 8|	message := HelperFunction()
 9|	fmt.Println(message)
10|	
11|	// Use shared struct
12|	s := &SharedStruct{
13|		ID:   1,
14|		Name: "test",
15|		Value: 42.0,
16|		Constants: []string{SharedConstant},
17|	}
18|	
19|	// Call methods on the struct
20|	fmt.Println(s.Method())
21|	s.Process()
22|	
23|	// Use shared interface
24|	var iface SharedInterface = s
25|	fmt.Println(iface.GetName())
26|	
27|	// Use shared type
28|	var t SharedType = 100
29|	fmt.Println(t)
30|}

