
===
/TEST_OUTPUT/workspace/another_consumer.go
References in File: 1
===

Reference at Line 19, Column 15:
19|func AnotherConsumer() {
20|	// Use helper function
21|	fmt.Println("Another message:", HelperFunction())
22|
23|	// Create another SharedStruct instance
24|	s := &SharedStruct{
25|		ID:        2,
26|		Name:      "another test",
27|		Value:     99.9,
28|		Constants: []string{SharedConstant, "extra"},
29|	}
30|
31|	// Use the struct methods
32|	if name := s.GetName(); name != "" {
33|		fmt.Println("Got name:", name)
34|	}
35|
36|	// Implement the interface with a custom type
37|	type CustomImplementor struct {
38|		SharedStruct
39|	}
40|
41|	custom := &CustomImplementor{
42|		SharedStruct: *s,
43|	}
44|
45|	// Custom type implements SharedInterface through embedding
46|	var iface SharedInterface = custom
47|	iface.Process()
48|
49|	// Use shared type as a slice type
50|	values := []SharedType{1, 2, 3}
51|	for _, v := range values {
52|		fmt.Println("Value:", v)
53|	}
54|}



===
/TEST_OUTPUT/workspace/consumer.go
References in File: 1
===

Reference at Line 24, Column 20:
24|func ConsumerFunction() {
25|	message := HelperFunction()
26|	fmt.Println(message)
27|
28|	// Use shared struct
29|	s := &SharedStruct{
30|		ID:        1,
31|		Name:      "test",
32|		Value:     42.0,
33|		Constants: []string{SharedConstant},
34|	}
35|
36|	// Call methods on the struct
37|	fmt.Println(s.Method())
38|	s.Process()
39|
40|	// Use shared interface
41|	var iface SharedInterface = s
42|	fmt.Println(iface.GetName())
43|
44|	// Use shared type
45|	var t SharedType = 100
46|	fmt.Println(t)
47|}

