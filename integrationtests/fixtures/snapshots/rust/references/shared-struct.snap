===
/TEST_OUTPUT/workspace/src/another_consumer.rs
References in File: 2
===
Reference at Line 13, Column 13:
 7|pub fn another_consumer_function() {
 8|    // Use the helper function
 9|    let result = helper_function();
10|    println!("Helper result from another consumer: {}", result);
11|
12|    // Use shared struct
13|    let s = SharedStruct::new("another test");
14|    println!("Struct in another consumer: {}", s.name);
15|
16|    // Use shared interface
17|    let _iface: &dyn SharedInterface = &s;
18|    
19|    // Use shared constant
20|    println!("Constant in another consumer: {}", SHARED_CONSTANT);
21|
22|    // Use shared type
23|    let _t: SharedType = String::from("another test");
24|}

===
/TEST_OUTPUT/workspace/src/consumer.rs
References in File: 2
===
Reference at Line 13, Column 13:
 7|pub fn consumer_function() {
 8|    // Use the helper function
 9|    let result = helper_function();
10|    println!("Helper result: {}", result);
11|
12|    // Use shared struct
13|    let s = SharedStruct::new("test");
14|    println!("Struct method: {}", s.method());
15|
16|    // Use shared interface
17|    let iface: &dyn SharedInterface = &s;
18|    println!("Interface method: {}", iface.get_name());
19|
20|    // Use shared constant
21|    println!("Constant: {}", SHARED_CONSTANT);
22|
23|    // Use shared type
24|    let t: SharedType = String::from("test");
25|    println!("Type: {}", t);
26|}

===
/TEST_OUTPUT/workspace/src/types.rs
References in File: 4
===
Reference at Line 54, Column 6:
54|impl SharedStruct {
55|    pub fn new(name: &str) -> Self {
56|        SharedStruct {
57|            name: String::from(name),
58|        }
59|    }
60|
61|    pub fn method(&self) -> String {
62|        format!("SharedStruct: {}", self.name)
63|    }
64|}


Reference at Line 56, Column 9:
54|impl SharedStruct {
55|    pub fn new(name: &str) -> Self {
56|        SharedStruct {
57|            name: String::from(name),
58|        }
59|    }
60|
61|    pub fn method(&self) -> String {
62|        format!("SharedStruct: {}", self.name)
63|    }
64|}


Reference at Line 70, Column 26:
70|impl SharedInterface for SharedStruct {
71|    fn get_name(&self) -> String {
72|        self.name.clone()
73|    }
74|}


Reference at Line 55, Column 31:
54|impl SharedStruct {
55|    pub fn new(name: &str) -> Self {
56|        SharedStruct {
57|            name: String::from(name),
58|        }
59|    }
60|
61|    pub fn method(&self) -> String {
62|        format!("SharedStruct: {}", self.name)
63|    }
64|}

