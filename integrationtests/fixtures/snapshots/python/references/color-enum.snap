===
/TEST_OUTPUT/workspace/another_consumer.py
References in File: 2
===
Reference at Line 54, Column 13:
31|def another_consumer_function() -> None:
32|    """Another function that uses various shared components."""
33|    # Use shared constants
34|    print(f"Using constant: {SHARED_CONSTANT}")
35|    
36|    # Use shared class with a different type parameter
37|    shared = SharedClass[float]("another example", 3.14)
38|    
39|    # Use methods from shared class
40|    name = shared.get_name()
41|    value = shared.get_value()
42|    print(f"Name: {name}, Value: {value}")
43|    
44|    # Use our own implementation
45|    impl = AnotherImplementation()
46|    result = impl.do_something()
47|    print(f"Implementation result: {result}")
48|    
49|    # Use helper function
50|    output = helper_function("another direct call")
51|    print(f"Helper output: {output}")
52|    
53|    # Use enum-like class with a different color
54|    color = Color.GREEN
55|    print(f"Selected color: {color}")

===
/TEST_OUTPUT/workspace/consumer.py
References in File: 2
===
Reference at Line 56, Column 13:
35|def consumer_function() -> None:
36|    """Function that consumes the helper functions."""
37|    # Use the helper function
38|    message = helper_function("World")
39|    print(message)
40|    
41|    # Get and process items from the helper
42|    items = get_items()
43|    for item in items:
44|        print(f"Processing {item}")
45|    
46|    # Use the shared class
47|    shared = SharedClass[str]("consumer", SHARED_CONSTANT)
48|    print(f"Using shared class: {shared.get_name()} - {shared.get_value()}")
49|    
50|    # Use our implementation of the shared interface
51|    impl = MyImplementation()
52|    result = impl.process(items)
53|    print(f"Processed items: {result}")
54|    
55|    # Use the enum
56|    color = Color.RED
57|    print(f"Selected color: {color}")

